#!/bin/bash -l

# Standard output and error:
#SBATCH -o ./sbi_train_post_cpu.out.%j
#SBATCH -e ./sbi_train_post_cpu.err.%j
#
# Initial working directory:
#SBATCH -D ./
# Job Name:
#SBATCH -J sbi_train_posterior_cpu
#
# Queue (Partition):
#SBATCH --partition=ccm
#SBATCH --constraint=rome
#
# Request 124 node(s)
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=120
#SBATCH --time=24:00:00

module purge
module load gcc/7
module load python
source /mnt/home/dsilvasanchez/virtual_envs/sbi_env/bin/activate

CONFIG_NAME="config.json"

python3 - << EOF
import torch
import numpy as np
from cryo_em_sbi import CryoEmSbi
import torch.nn as nn 
import torch.nn.functional as F 

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
       
        self.conv1 = nn.Conv2d(
            in_channels=1,
            out_channels=6,
            kernel_size=8
        )
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(
            in_channels=6,
            out_channels=6,
            kernel_size=8
        )
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
    
        
    def forward(self, x):
        
        x = x.view(-1, 1, 64, 64)

        x = F.relu(self.conv1(x))
        x = self.pool1(x)
        x = F.relu(self.conv2(x))
        x = self.pool2(x)

        return x.view(-1, 600)

embedding_net = CNN()

cryosbi = CryoEmSbi("$CONFIG_NAME")

indices = torch.load("indices_training.pt")
images = torch.load("images_training.pt")

# random_selector = np.arange(0, cryosbi.config["SIMULATION"]["N_SIMULATIONS"], 1)
# np.random.shuffle(random_selector)
# random_selector = random_selector[0:100000]

# indices = indices[random_selector]
# images = images[random_selector]

_ = cryosbi.train_posterior(indices, images, $SLURM_CPUS_PER_TASK)#, embedding_net)

EOF
